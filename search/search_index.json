{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grasshopperfund Welcome to the Grasshopperfund Documentation. Get Started at Onboarding . Grasshopperfund is a crowdfunding Web Application built using Django. Grasshopperfund is powered by StartSmart .","title":"Home"},{"location":"#grasshopperfund","text":"Welcome to the Grasshopperfund Documentation. Get Started at Onboarding . Grasshopperfund is a crowdfunding Web Application built using Django. Grasshopperfund is powered by StartSmart .","title":"Grasshopperfund"},{"location":"Django/","text":"Django Django is a Python Web Framework. It is one of the most popular Web Frameworks in the world. Compared to other Python Web Frameworks, Django is a batteries-included framework, meaning, a lot of functionality (Database, administration, authentication, etc.) comes with it. This saves time during development, but creates a learning curve for newcomers. Django and our project We are currently using Django for both the Frontend and Backend implementation. This repository contains the entire system, using Django. What does this mean? \u2702 Frontend and backend are not very separated, compared to other stacks. Django relies on templates to generate webpages. \ud83e\udd13 You need to be confident Django to develop the backend \ud83d\ude0a You need to be familiar with Django to develop the frontend \ud83c\udfc3\u200d\u2640\ufe0f Full project implementation is sped up by using many of Django's awesome tools \ud83c\udf1f Implementation is simplified by using only one framework \ud83d\udcc9 Frontend implementation is limited by what you can do within Django (i.e. no SPAs) Django as a Frontend Developer For a Django Fullstack Web App, web pages are served via templates, which are HTML files. The backend populates those templates with data from the database. What you need to know: A lil python Be familiar with Django views and models. Tutorials: Background (8 min, you can skip this) Quick Start (7 min) Comprehensive Tutorial (45 min) Want to find a different tutorial? Your google search should be along the lines of \"Django templates tutorial\"","title":"Django"},{"location":"Django/#django","text":"Django is a Python Web Framework. It is one of the most popular Web Frameworks in the world. Compared to other Python Web Frameworks, Django is a batteries-included framework, meaning, a lot of functionality (Database, administration, authentication, etc.) comes with it. This saves time during development, but creates a learning curve for newcomers.","title":"Django"},{"location":"Django/#django-and-our-project","text":"We are currently using Django for both the Frontend and Backend implementation. This repository contains the entire system, using Django. What does this mean? \u2702 Frontend and backend are not very separated, compared to other stacks. Django relies on templates to generate webpages. \ud83e\udd13 You need to be confident Django to develop the backend \ud83d\ude0a You need to be familiar with Django to develop the frontend \ud83c\udfc3\u200d\u2640\ufe0f Full project implementation is sped up by using many of Django's awesome tools \ud83c\udf1f Implementation is simplified by using only one framework \ud83d\udcc9 Frontend implementation is limited by what you can do within Django (i.e. no SPAs)","title":"Django and our project"},{"location":"Django/#django-as-a-frontend-developer","text":"For a Django Fullstack Web App, web pages are served via templates, which are HTML files. The backend populates those templates with data from the database. What you need to know: A lil python Be familiar with Django views and models. Tutorials: Background (8 min, you can skip this) Quick Start (7 min) Comprehensive Tutorial (45 min) Want to find a different tutorial? Your google search should be along the lines of \"Django templates tutorial\"","title":"Django as a Frontend Developer"},{"location":"Git-Workflow/","text":"Git Workflow What is a Git Workflow? Git is a Version Control System -- for this project, we'll be following a set of guidelines on how we each contribute to the project using Git. You can refer to this diagram for our general workflow: Things to notice: No direct commits to main Your work is done on a feature branch that you make The feature branch is made from the dev branch (switch to it before branching) When your done, make a Pull Request from your feature branch back to dev . For more information about our workflow and Git, checkout this guide I made: ICSSC @ UCI Git With the Flow","title":"Git Workflow"},{"location":"Git-Workflow/#git-workflow","text":"What is a Git Workflow? Git is a Version Control System -- for this project, we'll be following a set of guidelines on how we each contribute to the project using Git. You can refer to this diagram for our general workflow: Things to notice: No direct commits to main Your work is done on a feature branch that you make The feature branch is made from the dev branch (switch to it before branching) When your done, make a Pull Request from your feature branch back to dev . For more information about our workflow and Git, checkout this guide I made: ICSSC @ UCI Git With the Flow","title":"Git Workflow"},{"location":"Installation/","text":"Installation Clone repository git clone https://github.com/grasshopperfund/grasshopperfund/ Navigate into repository cd grasshopperfund \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\ env \\ Scripts \\ activate . ps1 Install Requirements (env) python -m pip install -r requirements.txt ---> 100% Configuration \ud83d\udd10 This portion provides API authetnication information. You can skip this We use environmental variables to store sensitive information. Anything that is committed to this repository becomes publicly available, and it is difficult to remove. The use of environmental variables is preferred (over, say, manual input via Django Admin) in order to use Github Actions to automate testing. Note Environmental variables are configured at config.py import os class Config : SOCIAL_AUTH_FACEBOOK_APP_ID = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_ID\" , \"\" ) SOCIAL_AUTH_FACEBOOK_APP_SECRET = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_SECRET\" , \"\" ) SOCIAL_AUTH_FACEBOOK_APP_KEY = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_KEY\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_ID = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_ID\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_SECRET = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_SECRET\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_KEY = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_KEY\" , \"\" ) Method 1: secrets.json Failure Currently not implemented. Method 2: Set environmental variables \ud83c\udf33 If you do not have our json file, or if you cannot use it for some reason, you will need to write environmental variables within your terminal. These variables must be made in the terminal/shell where your virtual environment is running The environmental variables are specified within config.py To set environmental variables, follow these instructions: Social Authentication API Tokens Note Not all of these fields may be required, but please populate as much as you can. macOS/Linux export SOCIAL_AUTH_FACEBOOK_APP_ID = your_facebook_app_id export SOCIAL_AUTH_FACEBOOK_APP_SECRET = your_facebook_app_secret export SOCIAL_AUTH_FACEBOOK_APP_KEY = your_facebook_app_key export SOCIAL_AUTH_GOOGLE_APP_ID = your_google_app_id export SOCIAL_AUTH_GOOGLE_APP_SECRET = your_google_app_secret export SOCIAL_AUTH_GOOGLE_APP_KEY = your_google_app_key Windows Command Line set SOCIAL_AUTH_FACEBOOK_APP_ID = your_facebook_app_id set SOCIAL_AUTH_FACEBOOK_APP_SECRET = your_facebook_app_secret set SOCIAL_AUTH_FACEBOOK_APP_KEY = your_facebook_app_key set SOCIAL_AUTH_GOOGLE_APP_ID = your_google_app_id set SOCIAL_AUTH_GOOGLE_APP_SECRET = your_google_app_secret set SOCIAL_AUTH_GOOGLE_APP_KEY = your_google_app_key Windows Powershell $env:SOCIAL_AUTH_FACEBOOK_APP_ID = \"your_facebook_app_id\" $env:SOCIAL_AUTH_FACEBOOK_APP_SECRET = \"your_facebook_app_secret\" $env:SOCIAL_AUTH_FACEBOOK_APP_KEY = \"your_facebook_app_key\" $env:SOCIAL_AUTH_GOOGLE_APP_ID = \"your_google_app_id\" $env:SOCIAL_AUTH_GOOGLE_APP_SECRET = \"your_google_app_secret\" $env:SOCIAL_AUTH_GOOGLE_APP_KEY = \"your_google_app_key\" Running Django Initialize database (env) python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, campaigns, contenttypes, sessions, sites, socialaccount, users Running migrations: ---> 100% Run Django app (env) python manage.py runserver Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). October 26, 2020 - 11:15:15 Django version 3.1.2, using settings 'grasshopperfund.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. Utilities Warning Be sure that the Django app is NOT running for these steps Creating a super user This allows access to /admin (env) python manage.py createsuperuser // Input the username for superuser login # Username ( leave blank to use 'default' ) : ( env ) administrator // You can leave email blank Email address: // Password must be at least 8 characters long # Password: ( env ) ******** # Password ( again ) : ( env ) ********","title":"Installation"},{"location":"Installation/#installation","text":"Clone repository git clone https://github.com/grasshopperfund/grasshopperfund/ Navigate into repository cd grasshopperfund \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\ env \\ Scripts \\ activate . ps1 Install Requirements (env) python -m pip install -r requirements.txt ---> 100%","title":"Installation"},{"location":"Installation/#configuration","text":"\ud83d\udd10 This portion provides API authetnication information. You can skip this We use environmental variables to store sensitive information. Anything that is committed to this repository becomes publicly available, and it is difficult to remove. The use of environmental variables is preferred (over, say, manual input via Django Admin) in order to use Github Actions to automate testing. Note Environmental variables are configured at config.py import os class Config : SOCIAL_AUTH_FACEBOOK_APP_ID = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_ID\" , \"\" ) SOCIAL_AUTH_FACEBOOK_APP_SECRET = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_SECRET\" , \"\" ) SOCIAL_AUTH_FACEBOOK_APP_KEY = os . environ . get ( \"SOCIAL_AUTH_FACEBOOK_APP_KEY\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_ID = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_ID\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_SECRET = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_SECRET\" , \"\" ) SOCIAL_AUTH_GOOGLE_APP_KEY = os . environ . get ( \"SOCIAL_AUTH_GOOGLE_APP_KEY\" , \"\" )","title":"Configuration"},{"location":"Installation/#method-1-secretsjson","text":"Failure Currently not implemented.","title":"Method 1: secrets.json"},{"location":"Installation/#method-2-set-environmental-variables","text":"\ud83c\udf33 If you do not have our json file, or if you cannot use it for some reason, you will need to write environmental variables within your terminal. These variables must be made in the terminal/shell where your virtual environment is running The environmental variables are specified within config.py To set environmental variables, follow these instructions: Social Authentication API Tokens Note Not all of these fields may be required, but please populate as much as you can. macOS/Linux export SOCIAL_AUTH_FACEBOOK_APP_ID = your_facebook_app_id export SOCIAL_AUTH_FACEBOOK_APP_SECRET = your_facebook_app_secret export SOCIAL_AUTH_FACEBOOK_APP_KEY = your_facebook_app_key export SOCIAL_AUTH_GOOGLE_APP_ID = your_google_app_id export SOCIAL_AUTH_GOOGLE_APP_SECRET = your_google_app_secret export SOCIAL_AUTH_GOOGLE_APP_KEY = your_google_app_key Windows Command Line set SOCIAL_AUTH_FACEBOOK_APP_ID = your_facebook_app_id set SOCIAL_AUTH_FACEBOOK_APP_SECRET = your_facebook_app_secret set SOCIAL_AUTH_FACEBOOK_APP_KEY = your_facebook_app_key set SOCIAL_AUTH_GOOGLE_APP_ID = your_google_app_id set SOCIAL_AUTH_GOOGLE_APP_SECRET = your_google_app_secret set SOCIAL_AUTH_GOOGLE_APP_KEY = your_google_app_key Windows Powershell $env:SOCIAL_AUTH_FACEBOOK_APP_ID = \"your_facebook_app_id\" $env:SOCIAL_AUTH_FACEBOOK_APP_SECRET = \"your_facebook_app_secret\" $env:SOCIAL_AUTH_FACEBOOK_APP_KEY = \"your_facebook_app_key\" $env:SOCIAL_AUTH_GOOGLE_APP_ID = \"your_google_app_id\" $env:SOCIAL_AUTH_GOOGLE_APP_SECRET = \"your_google_app_secret\" $env:SOCIAL_AUTH_GOOGLE_APP_KEY = \"your_google_app_key\"","title":"Method 2: Set environmental variables"},{"location":"Installation/#running-django","text":"Initialize database (env) python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, campaigns, contenttypes, sessions, sites, socialaccount, users Running migrations: ---> 100% Run Django app (env) python manage.py runserver Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). October 26, 2020 - 11:15:15 Django version 3.1.2, using settings 'grasshopperfund.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK.","title":"Running Django"},{"location":"Installation/#utilities","text":"Warning Be sure that the Django app is NOT running for these steps","title":"Utilities"},{"location":"Installation/#creating-a-super-user","text":"This allows access to /admin (env) python manage.py createsuperuser // Input the username for superuser login # Username ( leave blank to use 'default' ) : ( env ) administrator // You can leave email blank Email address: // Password must be at least 8 characters long # Password: ( env ) ******** # Password ( again ) : ( env ) ********","title":"Creating a super user"},{"location":"Onboarding/","text":"Onboarding This is meant to help onboard frontend developers. Our Project Structure: \u2514\u2500\u2500\u2500grasshopperfund \u251c\u2500\u2500\u2500grasshopperfund <-- Django-related files are here \u2502 \u251c\u2500\u2500\u2500organizations <-- Django models and views for organizations \u2502 \u251c\u2500\u2500\u2500campaigns <-- Django models and views for campaigns \u2502 \u251c\u2500\u2500\u2500users <-- Django models and views for users \u2502 \u251c\u2500\u2500\u2500tags <-- Django models and views for tags \u2502 \u2514\u2500\u2500\u2500templates <-- Django HTML templates \u2502 \u251c\u2500\u2500\u2500organizations \u2502 \u251c\u2500\u2500\u2500campaigns \u2502 \u251c\u2500\u2500\u2500users \u2502 \u2514\u2500\u2500\u2500tags \u2502 \u2514\u2500\u2500\u2500static <--- images used for the website. What do I need to know? Simply follow the links under \"Getting Started\". I suggest this order: Installation Git Workflow Django Simple assignment Read this on how to use Git The point of this assignment is to get you familiar with Git, Django, and our project. Please follow the installation guide before attempting this. git clone the repository make your own branch and publish it. Make a simple edit to startsmart/templates/main.html . Add a comment, button, whatever git add the changed file git commit that edit git push that edit Make a pull request explaining your edit.","title":"Onboarding"},{"location":"Onboarding/#onboarding","text":"This is meant to help onboard frontend developers. Our Project Structure: \u2514\u2500\u2500\u2500grasshopperfund \u251c\u2500\u2500\u2500grasshopperfund <-- Django-related files are here \u2502 \u251c\u2500\u2500\u2500organizations <-- Django models and views for organizations \u2502 \u251c\u2500\u2500\u2500campaigns <-- Django models and views for campaigns \u2502 \u251c\u2500\u2500\u2500users <-- Django models and views for users \u2502 \u251c\u2500\u2500\u2500tags <-- Django models and views for tags \u2502 \u2514\u2500\u2500\u2500templates <-- Django HTML templates \u2502 \u251c\u2500\u2500\u2500organizations \u2502 \u251c\u2500\u2500\u2500campaigns \u2502 \u251c\u2500\u2500\u2500users \u2502 \u2514\u2500\u2500\u2500tags \u2502 \u2514\u2500\u2500\u2500static <--- images used for the website.","title":"Onboarding"},{"location":"Onboarding/#what-do-i-need-to-know","text":"Simply follow the links under \"Getting Started\". I suggest this order: Installation Git Workflow Django","title":"What do I need to know?"},{"location":"Onboarding/#simple-assignment","text":"Read this on how to use Git The point of this assignment is to get you familiar with Git, Django, and our project. Please follow the installation guide before attempting this. git clone the repository make your own branch and publish it. Make a simple edit to startsmart/templates/main.html . Add a comment, button, whatever git add the changed file git commit that edit git push that edit Make a pull request explaining your edit.","title":"Simple assignment"},{"location":"Social-auth/","text":"Social Authentication uses allauth library. Two methods There are two methods to setting up Social Authentication using apps like Google and Facebook. Default : Environmental Variables (complex but automates the process) Django Admin (Simple but time consuming) Environmental Variables You can configure your API credentials as environmental variables, which are defined in config.py . See the ReadMe for more instructions. Django admin Be sure to comment out the 'APP' key-value pair in startsmart.settings.py within the dictionary SOCIALACCOUNT_PROVIDERS . Log into domain/admin (probably localhost:8000/admin ) with the superuser you created.","title":"Social Authentication"},{"location":"Social-auth/#social-authentication","text":"uses allauth library.","title":"Social Authentication"},{"location":"Social-auth/#two-methods","text":"There are two methods to setting up Social Authentication using apps like Google and Facebook. Default : Environmental Variables (complex but automates the process) Django Admin (Simple but time consuming)","title":"Two methods"},{"location":"Social-auth/#environmental-variables","text":"You can configure your API credentials as environmental variables, which are defined in config.py . See the ReadMe for more instructions.","title":"Environmental Variables"},{"location":"Social-auth/#django-admin","text":"Be sure to comment out the 'APP' key-value pair in startsmart.settings.py within the dictionary SOCIALACCOUNT_PROVIDERS . Log into domain/admin (probably localhost:8000/admin ) with the superuser you created.","title":"Django admin"},{"location":"database/","text":"Database The database plan I am proposing has 5 models which should be reasonable to implement with the time given. Users Campaigns Donations Tags Membership","title":"Database"},{"location":"database/#database","text":"The database plan I am proposing has 5 models which should be reasonable to implement with the time given. Users Campaigns Donations Tags Membership","title":"Database"},{"location":"frontend/","text":"Introduction This is a brief introduction on the frontend structure of Grasshopperfund. We will be using vanilla Django templates (for now) and a responsive CSS framework (Materialize) to make styling easier. As mentioned above, the CSS framework we will be using is Materialize CSS , based on Google's Material Design. We will also be utilizing Google Fonts and Material Icons . Folder setup All css files for this project are found in static/css . The global stylesheet, style.css , is responsible for the app's main styles. style.css is by default loaded into main.html, meaning that all other templates automatically inherit style.css's styles. If you are working on a page other than main.html and want to override a style in style.css, you need to create a new css file for that page. main.html main.html is the main (haha) template that all of the other templates will be extending. It can be found in grasshopperfund/templates . main.html contains: - The navigation bar - The footer - All global styles in style.css Creating & naming a new css file If you are formatting a template (other than main.html) and want to override a style in style.css, you need to create a new css file for that template. Name the css file similarly to the template that will be using it. For example, if I wanted to create a stylesheet for the user registration template ( grasshopperfund/templates/users/register.html ), I would name the stylesheet register.css and place it in static/css/users/ . You may have to create additional subfolders in the css folder depending on the templates you want to edit. Loading a new css file into a template Once you create a new css file and place it in the correct folder, you must correctly insert it into a template in order for it to work properly. To do so, follow these steps in your template : Insert {% load static %} tag at the top so that Django knows that your stylesheet is in /static/. Also double-check that your file contains {% extends 'main.html' %} . Create a style block by adding {% block styles %} and {% endblock %} tags. All of your page content should go between these tags. Load your stylesheet immediately after the opening {% block styles %} tag: <link rel='stylesheet' href=\"{% static 'css/users/register.css' %}\"> As an example, this is what register.html looks like after loading register.css stylesheet into it. Note that once you load another css file into your template, you can override global styles! Design guidelines The design guidelines for this project can be found here . Global stylesheet (style.css) style.css contains a basic implementation of all of the design guidelines outlined in our Figma folder. The current components included are: - Colors : all 5 primary colors (lightgreen, green, darkgreen, lightgrey, and yellow) are listed as variables in the :root pseudoclass. Note that these variables only work in style.css and cannot be used in other css files. - Fonts : Poppins and Lato are both loaded into main.html and can be used in any stylesheet, not just style.css. Poppins has been set to the default font. - Buttons : 3 different button classes have been initialized: .btn , .btn-flat , and .btn-yellow . .btn is a default green button, .btn-flat is a white button with green text, and .btn-yellow is a, you guessed it, yellow button. Buttons can also be large (.btn-large) or small (.btn-small) - see Materialize documentation for more info - Brand logo : The brand logo (.brand-logo) has been set as per the design guidelines. Other styles that should be in style.css but are not yet initialized include .navbar, .card, and .carousel.","title":"Frontend"},{"location":"frontend/#introduction","text":"This is a brief introduction on the frontend structure of Grasshopperfund. We will be using vanilla Django templates (for now) and a responsive CSS framework (Materialize) to make styling easier. As mentioned above, the CSS framework we will be using is Materialize CSS , based on Google's Material Design. We will also be utilizing Google Fonts and Material Icons .","title":"Introduction"},{"location":"frontend/#folder-setup","text":"All css files for this project are found in static/css . The global stylesheet, style.css , is responsible for the app's main styles. style.css is by default loaded into main.html, meaning that all other templates automatically inherit style.css's styles. If you are working on a page other than main.html and want to override a style in style.css, you need to create a new css file for that page.","title":"Folder setup"},{"location":"frontend/#mainhtml","text":"main.html is the main (haha) template that all of the other templates will be extending. It can be found in grasshopperfund/templates . main.html contains: - The navigation bar - The footer - All global styles in style.css","title":"main.html"},{"location":"frontend/#creating-naming-a-new-css-file","text":"If you are formatting a template (other than main.html) and want to override a style in style.css, you need to create a new css file for that template. Name the css file similarly to the template that will be using it. For example, if I wanted to create a stylesheet for the user registration template ( grasshopperfund/templates/users/register.html ), I would name the stylesheet register.css and place it in static/css/users/ . You may have to create additional subfolders in the css folder depending on the templates you want to edit.","title":"Creating &amp; naming a new css file"},{"location":"frontend/#loading-a-new-css-file-into-a-template","text":"Once you create a new css file and place it in the correct folder, you must correctly insert it into a template in order for it to work properly. To do so, follow these steps in your template : Insert {% load static %} tag at the top so that Django knows that your stylesheet is in /static/. Also double-check that your file contains {% extends 'main.html' %} . Create a style block by adding {% block styles %} and {% endblock %} tags. All of your page content should go between these tags. Load your stylesheet immediately after the opening {% block styles %} tag: <link rel='stylesheet' href=\"{% static 'css/users/register.css' %}\"> As an example, this is what register.html looks like after loading register.css stylesheet into it. Note that once you load another css file into your template, you can override global styles!","title":"Loading a new css file into a template"},{"location":"frontend/#design-guidelines","text":"The design guidelines for this project can be found here .","title":"Design guidelines"},{"location":"frontend/#global-stylesheet-stylecss","text":"style.css contains a basic implementation of all of the design guidelines outlined in our Figma folder. The current components included are: - Colors : all 5 primary colors (lightgreen, green, darkgreen, lightgrey, and yellow) are listed as variables in the :root pseudoclass. Note that these variables only work in style.css and cannot be used in other css files. - Fonts : Poppins and Lato are both loaded into main.html and can be used in any stylesheet, not just style.css. Poppins has been set to the default font. - Buttons : 3 different button classes have been initialized: .btn , .btn-flat , and .btn-yellow . .btn is a default green button, .btn-flat is a white button with green text, and .btn-yellow is a, you guessed it, yellow button. Buttons can also be large (.btn-large) or small (.btn-small) - see Materialize documentation for more info - Brand logo : The brand logo (.brand-logo) has been set as per the design guidelines. Other styles that should be in style.css but are not yet initialized include .navbar, .card, and .carousel.","title":"Global stylesheet (style.css)"},{"location":"change-log/added-organizations-and-posts/","text":"Pull Request Organizations + Posts Implemented Organizations and posts basic implementation. You can now create, edit, delete, and view organizations and posts. Tests have also been implemented, providing over 90% coverage over grasshopper/organizations and grasshopper/posts . This covers issues #13 and #38. Organizations All python files related to organizations can be found under grasshopper/organizations . HTML templates can be found under grasshopper/templates/organizations . New organization URLs are under /organizations : /organization/browse Browse an unordered list of Organizations. Buttons to view are available publicly, and buttons to edit/delete are available to owners. /organization/view/<organization_name> View an organization, its posts, and campaigns. Buttons to view posts are available publicly, and buttons to edit/delete posts/organization are available to owners. Form to create a new post is available to owners. Button to create a campaign is available to owners. /organization/update/<organization_name> Edit an organization. /organization/delete/<organization_name> Delete an organization. /organization/create Create an organization. To reiterate, you must go to /organization/view/<organization_name> to create a campaign. A different flow to create a campaign can be implemented, but this is the short term solution to enforce that an Organization must be created before a Campaign is created. If an attempt to create a Campaign without a parent Organization specified, it will cause an Internal Server Error . Posts All python files related to posts can be found under grasshopper/posts . HTML templates can be found under grasshopper/templates/posts . I've added a simple template called templates/posts/post.html which is a simple Materialize card, from which all posts are displayed. In other words, templates/organizations/view_organization.html , templates/posts/view_post.html , and other templates which display a post include the template templates/posts/post.html . To view an Organization's feed of posts, see organization/view/<organization_name> . All post URLS are under /posts . Note that currently, all URLs must take the name of an Organization as a parameter -- this helps the backend process requests. /posts/view/<organization_name>/<post_id> View a single post. /posts/update/<organization_name>/<post_id> Edit a post. /posts/delete/<organization_name>/<post_id> Delete a post. /posts/create/<organization_name> Create a post. Side note: Posts views.py uses class-based Django views. Previously, we have been using function-based Django views. Class-based Django views allow for more control, and we can use built-in generic views that make implementation quicker and simpler. Read more about class-based Django views here .","title":"added Organizations and Posts"},{"location":"change-log/added-organizations-and-posts/#organizations-posts-implemented","text":"Organizations and posts basic implementation. You can now create, edit, delete, and view organizations and posts. Tests have also been implemented, providing over 90% coverage over grasshopper/organizations and grasshopper/posts . This covers issues #13 and #38.","title":"Organizations + Posts Implemented"},{"location":"change-log/added-organizations-and-posts/#organizations","text":"All python files related to organizations can be found under grasshopper/organizations . HTML templates can be found under grasshopper/templates/organizations . New organization URLs are under /organizations : /organization/browse Browse an unordered list of Organizations. Buttons to view are available publicly, and buttons to edit/delete are available to owners. /organization/view/<organization_name> View an organization, its posts, and campaigns. Buttons to view posts are available publicly, and buttons to edit/delete posts/organization are available to owners. Form to create a new post is available to owners. Button to create a campaign is available to owners. /organization/update/<organization_name> Edit an organization. /organization/delete/<organization_name> Delete an organization. /organization/create Create an organization. To reiterate, you must go to /organization/view/<organization_name> to create a campaign. A different flow to create a campaign can be implemented, but this is the short term solution to enforce that an Organization must be created before a Campaign is created. If an attempt to create a Campaign without a parent Organization specified, it will cause an Internal Server Error .","title":"Organizations"},{"location":"change-log/added-organizations-and-posts/#posts","text":"All python files related to posts can be found under grasshopper/posts . HTML templates can be found under grasshopper/templates/posts . I've added a simple template called templates/posts/post.html which is a simple Materialize card, from which all posts are displayed. In other words, templates/organizations/view_organization.html , templates/posts/view_post.html , and other templates which display a post include the template templates/posts/post.html . To view an Organization's feed of posts, see organization/view/<organization_name> . All post URLS are under /posts . Note that currently, all URLs must take the name of an Organization as a parameter -- this helps the backend process requests. /posts/view/<organization_name>/<post_id> View a single post. /posts/update/<organization_name>/<post_id> Edit a post. /posts/delete/<organization_name>/<post_id> Delete a post. /posts/create/<organization_name> Create a post. Side note: Posts views.py uses class-based Django views. Previously, we have been using function-based Django views. Class-based Django views allow for more control, and we can use built-in generic views that make implementation quicker and simpler. Read more about class-based Django views here .","title":"Posts"},{"location":"change-log/added-organizations/","text":"Added Organizations This is a basic implementation of Organizations for #13 . Not all model attributes have been added \ud83c\udf1f What's new? Added directories All models, views, and URLs directly related to Organizations can be found under startsmart/organizations . All templates used for Organizations can be found under startsmart/templates/organizations . New Database Models I have created new models named Organization and Post . The reason I created Post is because it is needed as an attribute of Organization , as indicated in our database ER diagram. It should also help whoever will be implementing it. You can find these new models within startsmart/organizations/models.py Organization CRUD You can now create, view, update, delete, and browse organizations! Much of the functionality is based on the current implementation of Campaigns. Here are the new URL paths: /organizations/view/<organization_name> /organizations/update/<organization_name> /organizations/delete/<organization_name> /organizations/create /organizations/browse \ud83d\ude2e What's changed? Besides settings.py , I have limited my changes to existing files to avoid merge conflicts. That being said, the implementation of Organizations has been limited. \ud83d\ude22 What's missing? To avoid merge conflicts, I have not made any edits to users or campaigns . Because of this, I cannot implement the following: Organizations Followers Campaigns Tags Posts Likes Tags \ud83c\udfc3\ud83c\udffd\u200d\u2642\ufe0f Going forward Once this is approved, and after checking where you guys are making edits, I'd like to make major changes to startsmart/campaigns to be in line with the current requirements and database design. Campaigns are currently made and owned by any registered user. Now, they can only be made and owned by an organization owner, and every campaign must be associated with an organization . The implementation of Organizations will cause cascading changes for campaign models, views, and URL paths. Thus, organizations cannot be fully implemented until these changes are made .","title":"Added Organizations"},{"location":"change-log/added-organizations/#added-organizations","text":"This is a basic implementation of Organizations for #13 . Not all model attributes have been added","title":"Added Organizations"},{"location":"change-log/added-organizations/#whats-new","text":"","title":"\ud83c\udf1f What's new?"},{"location":"change-log/added-organizations/#added-directories","text":"All models, views, and URLs directly related to Organizations can be found under startsmart/organizations . All templates used for Organizations can be found under startsmart/templates/organizations .","title":"Added directories"},{"location":"change-log/added-organizations/#new-database-models","text":"I have created new models named Organization and Post . The reason I created Post is because it is needed as an attribute of Organization , as indicated in our database ER diagram. It should also help whoever will be implementing it. You can find these new models within startsmart/organizations/models.py","title":"New Database Models"},{"location":"change-log/added-organizations/#organization-crud","text":"You can now create, view, update, delete, and browse organizations! Much of the functionality is based on the current implementation of Campaigns. Here are the new URL paths: /organizations/view/<organization_name> /organizations/update/<organization_name> /organizations/delete/<organization_name> /organizations/create /organizations/browse","title":"Organization CRUD"},{"location":"change-log/added-organizations/#whats-changed","text":"Besides settings.py , I have limited my changes to existing files to avoid merge conflicts. That being said, the implementation of Organizations has been limited.","title":"\ud83d\ude2e What's changed?"},{"location":"change-log/added-organizations/#whats-missing","text":"To avoid merge conflicts, I have not made any edits to users or campaigns . Because of this, I cannot implement the following: Organizations Followers Campaigns Tags Posts Likes Tags","title":"\ud83d\ude22 What's missing?"},{"location":"change-log/added-organizations/#going-forward","text":"Once this is approved, and after checking where you guys are making edits, I'd like to make major changes to startsmart/campaigns to be in line with the current requirements and database design. Campaigns are currently made and owned by any registered user. Now, they can only be made and owned by an organization owner, and every campaign must be associated with an organization . The implementation of Organizations will cause cascading changes for campaign models, views, and URL paths. Thus, organizations cannot be fully implemented until these changes are made .","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2642\ufe0f Going forward"},{"location":"change-log/added-tags/","text":"Added Tags \u2705 Demo of the Campaigns with Tags Below are demos of Tags. \ud83d\udd36 Campaigns without existing tags \ud83d\udd37 Campaigns with existing tags How to run makemigrations command with Campaigns and Tags If the migrations for campaigns and / or tags got deleted or want to delete those two migrations, use this command: python manage.py makemigrations campaigns tags Please see this link that describes about \"No changes detected\" prompt for makemigrations Where it talks about this problem: This will solve the issue if you got a CircularDependencyError error issue when running this command python manage.py migrate Please see this link that describes about the CircularDependencyError error issue \ud83d\udd35 Testing for Tags app In case if you have tests.py in the tags app (as shown in the image below): Delete the tests.py and you should have a folder name tags\\tests folder that looks something like this (as shown in the image below): Use this command to run the test cases for tags: python manage.py test startsmart.tags \ud83c\udf81 What contains the folder of Tags app? The Tags folder contains init .py, admin.py, apps.py, forms.py, models.py, urls.py, and view.py (as shown in the image below): The Tags folder also contains migrations and tests under these two files (as shown below): startsmart/tags/tests and startsmart/tags/migrations You can see all of the contents of Tags folder under the name: startsmart/tags You should see 'startsmart.tags.apps.TagsConfig' in the settings.py You should see the templates about Tags under this folder: startsmart/templates/tags \ud83d\udcbe URLs for Tags You should only see this url: filter/<tagname> Note that I will add additional urls for Tags later on as I'm experimenting on it. \ud83c\udfc3\u200d\u2642\ufe0f Next steps I will continue to work with Tags and Organizations to create an Organization with Tags and move forward with Adding Campaigns in the Organizations once I get familiar with the concept interface testing interactions between Organizations and Tags. I will also continue to add other command lines such as this one as an example: python manage.py makemigrations campaigns tags organizations , more on that later on. I will be working on the search bar for Campaigns once when I configure testing interactions between Organizations and Campaigns with / without Tags. I will try to come up with a way to perform makemigrations on each seperate models, such as this one as an example: python manage.py makemigrations campaigns but for now on you can write this command line if a Tags app needs to be added in the Campaigns app. python manage.py makemigrations campaigns tags Thanks for understanding!","title":"Added Tags"},{"location":"change-log/added-tags/#added-tags","text":"","title":"Added Tags"},{"location":"change-log/added-tags/#demo-of-the-campaigns-with-tags","text":"Below are demos of Tags.","title":"\u2705 Demo of the Campaigns with Tags"},{"location":"change-log/added-tags/#campaigns-without-existing-tags","text":"","title":"\ud83d\udd36 Campaigns without existing tags"},{"location":"change-log/added-tags/#campaigns-with-existing-tags","text":"","title":"\ud83d\udd37 Campaigns with existing tags"},{"location":"change-log/added-tags/#how-to-run-makemigrations-command-with-campaigns-and-tags","text":"If the migrations for campaigns and / or tags got deleted or want to delete those two migrations, use this command: python manage.py makemigrations campaigns tags Please see this link that describes about \"No changes detected\" prompt for makemigrations Where it talks about this problem: This will solve the issue if you got a CircularDependencyError error issue when running this command python manage.py migrate Please see this link that describes about the CircularDependencyError error issue","title":"How to run makemigrations command with Campaigns and Tags"},{"location":"change-log/added-tags/#testing-for-tags-app","text":"In case if you have tests.py in the tags app (as shown in the image below): Delete the tests.py and you should have a folder name tags\\tests folder that looks something like this (as shown in the image below): Use this command to run the test cases for tags: python manage.py test startsmart.tags","title":"\ud83d\udd35 Testing for Tags app"},{"location":"change-log/added-tags/#what-contains-the-folder-of-tags-app","text":"The Tags folder contains init .py, admin.py, apps.py, forms.py, models.py, urls.py, and view.py (as shown in the image below): The Tags folder also contains migrations and tests under these two files (as shown below): startsmart/tags/tests and startsmart/tags/migrations You can see all of the contents of Tags folder under the name: startsmart/tags You should see 'startsmart.tags.apps.TagsConfig' in the settings.py You should see the templates about Tags under this folder: startsmart/templates/tags","title":"\ud83c\udf81 What contains the folder of Tags app?"},{"location":"change-log/added-tags/#urls-for-tags","text":"You should only see this url: filter/<tagname> Note that I will add additional urls for Tags later on as I'm experimenting on it.","title":"\ud83d\udcbe URLs for Tags"},{"location":"change-log/added-tags/#next-steps","text":"I will continue to work with Tags and Organizations to create an Organization with Tags and move forward with Adding Campaigns in the Organizations once I get familiar with the concept interface testing interactions between Organizations and Tags. I will also continue to add other command lines such as this one as an example: python manage.py makemigrations campaigns tags organizations , more on that later on. I will be working on the search bar for Campaigns once when I configure testing interactions between Organizations and Campaigns with / without Tags. I will try to come up with a way to perform makemigrations on each seperate models, such as this one as an example: python manage.py makemigrations campaigns but for now on you can write this command line if a Tags app needs to be added in the Campaigns app. python manage.py makemigrations campaigns tags Thanks for understanding!","title":"\ud83c\udfc3\u200d\u2642\ufe0f Next steps"},{"location":"change-log/created-donation/","text":"Pull Request Changes: Steve: Hey guys I finalized my code and pushed all the updates on the Github. Here's a summary of what I changed and updated: Created Donation model/model forms able to donate to a campaign and if you already donated, the system won't let you donate again (as Caitlyn requested) Updated browse_organizations.html because previously, I found that although I am logged in as \"steveck\", I am able to view the organization made by \"steve\" (different user) and basically make posts and create campaigns although I am not the owner of the campaign. Updated it so that only the owner can make such actions Added a full list of donations made by the user in their profile Updated the campaign.current_money property function so that it correctly returns the total of all donations made currently when the current money exceeds the goal, the system doesn't do anything in terms of whether to no longer show the campaign, etc. I am guessing we should talk about this during a meeting later this week and ask what everyone else thinks we should do once this occurs. Thank you all for your patience! I know it isn't much but all the changes should be present on Github.","title":"Created donation"},{"location":"change-log/created-donation/#changes","text":"Steve: Hey guys I finalized my code and pushed all the updates on the Github. Here's a summary of what I changed and updated: Created Donation model/model forms able to donate to a campaign and if you already donated, the system won't let you donate again (as Caitlyn requested) Updated browse_organizations.html because previously, I found that although I am logged in as \"steveck\", I am able to view the organization made by \"steve\" (different user) and basically make posts and create campaigns although I am not the owner of the campaign. Updated it so that only the owner can make such actions Added a full list of donations made by the user in their profile Updated the campaign.current_money property function so that it correctly returns the total of all donations made currently when the current money exceeds the goal, the system doesn't do anything in terms of whether to no longer show the campaign, etc. I am guessing we should talk about this during a meeting later this week and ask what everyone else thinks we should do once this occurs. Thank you all for your patience! I know it isn't much but all the changes should be present on Github.","title":"Changes:"},{"location":"change-log/css-setup/","text":"Pull Request Summary of my changes Created a css folder for all stylesheets (static/css). Created and initialized a global stylesheet (static/css/style.css) and loaded it into main.html. Created and loaded an [empty] stylesheet for register.html (static/css/users/register.css). frontend documentation below\u2757 \u2757 \u2757 Introduction This is a brief introduction on the frontend structure of Grasshopperfund. We will be using vanilla Django templates (for now) and a responsive CSS framework (Materialize) to make styling easier. As mentioned above, the CSS framework we will be using is Materialize CSS , based on Google's Material Design. We will also be utilizing Google Fonts and Material Icons . Folder setup All css files for this project are found in static/css . The global stylesheet, style.css , is responsible for the app's main styles. style.css is by default loaded into main.html, meaning that all other templates automatically inherit style.css's styles. If you are working on a page other than main.html and want to override a style in style.css, you need to create a new css file for that page. main.html main.html is the main (haha) template that all of the other templates will be extending. It can be found in grasshopperfund/templates . main.html contains: The navigation bar The footer All global styles in style.css Creating & naming a new css file If you are formatting a template (other than main.html) and want to override a style in style.css, you need to create a new css file for that template. Name the css file similarly to the template that will be using it. For example, if I wanted to create a stylesheet for the user registration template ( grasshopperfund/templates/users/register.html ), I would name the stylesheet register.css and place it in static/css/users/ . You may have to create additional subfolders in the css folder depending on the templates you want to edit. Loading a new css file into a template Once you create a new css file and place it in the correct folder, you must correctly insert it into a template in order for it to work properly. To do so, follow these steps in your template : Insert {% load static %} tag at the top so that Django knows that your stylesheet is in /static/. Also double-check that your file contains {% extends 'main.html' %} . Create a style block by adding {% block styles %} and {% endblock %} tags. All of your page content should go between these tags. Load your stylesheet immediately after the opening {% block styles %} tag: <link rel='stylesheet' href=\"{% static 'css/users/register.css' %}\"> As an example, this is what register.html looks like after loading register.css stylesheet into it. Note that once you load another css file into your template, you can override global styles! Design guidelines The design guidelines for this project can be found here . Global stylesheet (style.css) style.css contains a basic implementation of all of the design guidelines outlined in our Figma folder. The current components included are: Colors : all 5 primary colors (lightgreen, green, darkgreen, lightgrey, and yellow) are listed as variables in the :root pseudoclass. Note that these variables only work in style.css and cannot be used in other css files. Fonts : Poppins and Lato are both loaded into main.html and can be used in any stylesheet, not just style.css. Poppins has been set to the default font. Buttons : 3 different button classes have been initialized: .btn , .btn-flat , and .btn-yellow . .btn is a default green button, .btn-flat is a white button with green text, and .btn-yellow is a, you guessed it, yellow button. Buttons can also be large (.btn-large) or small (.btn-small) - see Materialize documentation for more info Brand logo : The brand logo (.brand-logo) has been set as per the design guidelines. Other styles that should be in style.css but are not yet initialized include .navbar, .card, and .carousel.","title":"CSS Setup"},{"location":"change-log/css-setup/#summary-of-my-changes","text":"Created a css folder for all stylesheets (static/css). Created and initialized a global stylesheet (static/css/style.css) and loaded it into main.html. Created and loaded an [empty] stylesheet for register.html (static/css/users/register.css). frontend documentation below\u2757 \u2757 \u2757","title":"Summary of my changes"},{"location":"change-log/css-setup/#introduction","text":"This is a brief introduction on the frontend structure of Grasshopperfund. We will be using vanilla Django templates (for now) and a responsive CSS framework (Materialize) to make styling easier. As mentioned above, the CSS framework we will be using is Materialize CSS , based on Google's Material Design. We will also be utilizing Google Fonts and Material Icons .","title":"Introduction"},{"location":"change-log/css-setup/#folder-setup","text":"All css files for this project are found in static/css . The global stylesheet, style.css , is responsible for the app's main styles. style.css is by default loaded into main.html, meaning that all other templates automatically inherit style.css's styles. If you are working on a page other than main.html and want to override a style in style.css, you need to create a new css file for that page.","title":"Folder setup"},{"location":"change-log/css-setup/#mainhtml","text":"main.html is the main (haha) template that all of the other templates will be extending. It can be found in grasshopperfund/templates . main.html contains: The navigation bar The footer All global styles in style.css","title":"main.html"},{"location":"change-log/css-setup/#creating-naming-a-new-css-file","text":"If you are formatting a template (other than main.html) and want to override a style in style.css, you need to create a new css file for that template. Name the css file similarly to the template that will be using it. For example, if I wanted to create a stylesheet for the user registration template ( grasshopperfund/templates/users/register.html ), I would name the stylesheet register.css and place it in static/css/users/ . You may have to create additional subfolders in the css folder depending on the templates you want to edit.","title":"Creating &amp; naming a new css file"},{"location":"change-log/css-setup/#loading-a-new-css-file-into-a-template","text":"Once you create a new css file and place it in the correct folder, you must correctly insert it into a template in order for it to work properly. To do so, follow these steps in your template : Insert {% load static %} tag at the top so that Django knows that your stylesheet is in /static/. Also double-check that your file contains {% extends 'main.html' %} . Create a style block by adding {% block styles %} and {% endblock %} tags. All of your page content should go between these tags. Load your stylesheet immediately after the opening {% block styles %} tag: <link rel='stylesheet' href=\"{% static 'css/users/register.css' %}\"> As an example, this is what register.html looks like after loading register.css stylesheet into it. Note that once you load another css file into your template, you can override global styles!","title":"Loading a new css file into a template"},{"location":"change-log/css-setup/#design-guidelines","text":"The design guidelines for this project can be found here .","title":"Design guidelines"},{"location":"change-log/css-setup/#global-stylesheet-stylecss","text":"style.css contains a basic implementation of all of the design guidelines outlined in our Figma folder. The current components included are: Colors : all 5 primary colors (lightgreen, green, darkgreen, lightgrey, and yellow) are listed as variables in the :root pseudoclass. Note that these variables only work in style.css and cannot be used in other css files. Fonts : Poppins and Lato are both loaded into main.html and can be used in any stylesheet, not just style.css. Poppins has been set to the default font. Buttons : 3 different button classes have been initialized: .btn , .btn-flat , and .btn-yellow . .btn is a default green button, .btn-flat is a white button with green text, and .btn-yellow is a, you guessed it, yellow button. Buttons can also be large (.btn-large) or small (.btn-small) - see Materialize documentation for more info Brand logo : The brand logo (.brand-logo) has been set as per the design guidelines. Other styles that should be in style.css but are not yet initialized include .navbar, .card, and .carousel.","title":"Global stylesheet (style.css)"},{"location":"change-log/project-restructure/","text":"Change Log \ud83d\udd12 Removing vulnerabilities Removed API secrets Instead of using Django Admin to store Social App developer secrets, they are now stored in startsmart/settings.py . Facebook and Google API secrets have been publicly exposed \ud83d\ude2c -- I suggest the owner refresh their secrets. There are two methods for providing your Facebook and Google API secrets. * Default : Environmental Variables * Old / easier way : Django admin More info here Removed user information The SQLite database was included in the commit -- this would allow anyone to obtain user information. I removed it and wrote documentation on how to initialize it. \ud83d\udcdd Documentation A simple readme to install dependencies, initialize the database, and run the server. In-depth documentation hosted on the web . TO DO : Elaborate on developing locally \ud83d\udcc8 Scalability Project restructured for scalability. Since this project is titled as a backend-version , this new structure allows for easier implementation of Web API endpoints such as REST or GraphQL. With that django-powered Web-API, this structure allows for an addition of a front-end framework such as React or Vue.js. Structure guidelines Here are some points to follow when contributing: * Initialize database with each new clone using python manage.py migrate * Use packages and keep them within the startsmart directory * Use environmental variables for sensitive information, which you can configure in config.py * Don't commit private information such as a database or profile pictures (these are already included in .gitignore ). Example : Let's say you want to implement Campaigns. You'll need a new set of routes/models for campaigns . * Create a new folder within startsmart called campaigns , and create an apps.py within startsmart.campaigns (see startsmart.users for an example structure and apps.py ). * Define your URL routes within startsmart.campaigns.urls instead of startsmart.urls . * Register this app within startsmart.settings.INSTALLED-APPS as startsmart.campaigns This project restructure is based on this popular Django cookiecutter Url routing Now URL routes are no longer defined startsmart.urls . Routes are now each defined in their respective directory, which is currently only startsmart.users.urls . Those routes are then imported into startsmart.url with INSTALLED-APPS registered in startsmart.settings","title":"Project Restructure"},{"location":"change-log/project-restructure/#change-log","text":"","title":"Change Log"},{"location":"change-log/project-restructure/#removing-vulnerabilities","text":"","title":"\ud83d\udd12 Removing vulnerabilities"},{"location":"change-log/project-restructure/#removed-api-secrets","text":"Instead of using Django Admin to store Social App developer secrets, they are now stored in startsmart/settings.py . Facebook and Google API secrets have been publicly exposed \ud83d\ude2c -- I suggest the owner refresh their secrets. There are two methods for providing your Facebook and Google API secrets. * Default : Environmental Variables * Old / easier way : Django admin More info here","title":"Removed API secrets"},{"location":"change-log/project-restructure/#removed-user-information","text":"The SQLite database was included in the commit -- this would allow anyone to obtain user information. I removed it and wrote documentation on how to initialize it.","title":"Removed user information"},{"location":"change-log/project-restructure/#documentation","text":"A simple readme to install dependencies, initialize the database, and run the server. In-depth documentation hosted on the web . TO DO : Elaborate on developing locally","title":"\ud83d\udcdd Documentation"},{"location":"change-log/project-restructure/#scalability","text":"Project restructured for scalability. Since this project is titled as a backend-version , this new structure allows for easier implementation of Web API endpoints such as REST or GraphQL. With that django-powered Web-API, this structure allows for an addition of a front-end framework such as React or Vue.js.","title":"\ud83d\udcc8 Scalability"},{"location":"change-log/project-restructure/#structure-guidelines","text":"Here are some points to follow when contributing: * Initialize database with each new clone using python manage.py migrate * Use packages and keep them within the startsmart directory * Use environmental variables for sensitive information, which you can configure in config.py * Don't commit private information such as a database or profile pictures (these are already included in .gitignore ). Example : Let's say you want to implement Campaigns. You'll need a new set of routes/models for campaigns . * Create a new folder within startsmart called campaigns , and create an apps.py within startsmart.campaigns (see startsmart.users for an example structure and apps.py ). * Define your URL routes within startsmart.campaigns.urls instead of startsmart.urls . * Register this app within startsmart.settings.INSTALLED-APPS as startsmart.campaigns This project restructure is based on this popular Django cookiecutter","title":"Structure guidelines"},{"location":"change-log/project-restructure/#url-routing","text":"Now URL routes are no longer defined startsmart.urls . Routes are now each defined in their respective directory, which is currently only startsmart.users.urls . Those routes are then imported into startsmart.url with INSTALLED-APPS registered in startsmart.settings","title":"Url routing"},{"location":"change-log/suggestions/","text":"Suggestions Additional Database Models \ud83d\udcbe Models needed for a working prototype Campaign Tags Donation Membership Type More suggested models Not necessary, but may be useful User roles (creator, team member, investor/backer, beneficiary) Comments Social Authentication \ud83d\udc6f\u200d\u2642\ufe0f With Social Authentication already implemented, there's a lot more that can be done with it Invite friends to StartSmart Prepopulate profiles based on Social media accounts Share campaigns Campaign Search Engine \ud83d\udd0d Search campaigns via tags, description, creator, and title from one simple search bar. Implementation via ElasticSearch Feasible to implement within the next few weeks Improve UX for finding causes to support Template forms \ud83d\udcdd Offer prefilled forms made by us and other users based on the type of campaign. Works with crispy-forms . Gives non-technical users a quick way to create a campaign. Web API \ud83c\udf10 Most likely a REST API, but implementation of GraphQL would be nice. Mobile App Development \ud83d\udcf1 Allows the reusability for many backend features in the creation of an iOS or Android app. Authentication (Session, login, Social Authentication, etc.) Registration Campaigns etc. (basically, anything in the backend can be reused as long as the Web API is properly implemented) Easy to implement while developing the prototype via the Django REST Framework Separation of Backend and Frontend \ud83e\udd1d While Django is a complete framework for fullstack web development, it does have limitations in UI/UX due to it's template-based pages. A fully implemented Web API would allow work to be cleanly separated with a Django backend and some frontend framework (Vue.js, React.js, etc.). Opens up to the creation of an SPA website. Potential to vastly improve UI/UX with increased reactivity and quicker loading times HTML Widgets \u2699 GoFundMe has a nice HTML widget for donations. A Web API would make it easier to create this. Control to the user \ud83d\udc51 Allow campaign creators and their team to do more with fundraising data (incorporating current funds and donation button on their website or app)","title":"Suggestions"},{"location":"change-log/suggestions/#suggestions","text":"","title":"Suggestions"},{"location":"change-log/suggestions/#additional-database-models","text":"\ud83d\udcbe Models needed for a working prototype Campaign Tags Donation Membership Type","title":"Additional Database Models"},{"location":"change-log/suggestions/#more-suggested-models","text":"Not necessary, but may be useful User roles (creator, team member, investor/backer, beneficiary) Comments","title":"More suggested models"},{"location":"change-log/suggestions/#social-authentication","text":"\ud83d\udc6f\u200d\u2642\ufe0f With Social Authentication already implemented, there's a lot more that can be done with it Invite friends to StartSmart Prepopulate profiles based on Social media accounts Share campaigns","title":"Social Authentication"},{"location":"change-log/suggestions/#campaign-search-engine","text":"\ud83d\udd0d Search campaigns via tags, description, creator, and title from one simple search bar. Implementation via ElasticSearch Feasible to implement within the next few weeks Improve UX for finding causes to support","title":"Campaign Search Engine"},{"location":"change-log/suggestions/#template-forms","text":"\ud83d\udcdd Offer prefilled forms made by us and other users based on the type of campaign. Works with crispy-forms . Gives non-technical users a quick way to create a campaign.","title":"Template forms"},{"location":"change-log/suggestions/#web-api","text":"\ud83c\udf10 Most likely a REST API, but implementation of GraphQL would be nice.","title":"Web API"},{"location":"change-log/suggestions/#mobile-app-development","text":"\ud83d\udcf1 Allows the reusability for many backend features in the creation of an iOS or Android app. Authentication (Session, login, Social Authentication, etc.) Registration Campaigns etc. (basically, anything in the backend can be reused as long as the Web API is properly implemented) Easy to implement while developing the prototype via the Django REST Framework","title":"Mobile App Development"},{"location":"change-log/suggestions/#separation-of-backend-and-frontend","text":"\ud83e\udd1d While Django is a complete framework for fullstack web development, it does have limitations in UI/UX due to it's template-based pages. A fully implemented Web API would allow work to be cleanly separated with a Django backend and some frontend framework (Vue.js, React.js, etc.). Opens up to the creation of an SPA website. Potential to vastly improve UI/UX with increased reactivity and quicker loading times","title":"Separation of Backend and Frontend"},{"location":"change-log/suggestions/#html-widgets","text":"\u2699 GoFundMe has a nice HTML widget for donations. A Web API would make it easier to create this.","title":"HTML Widgets"},{"location":"change-log/suggestions/#control-to-the-user","text":"\ud83d\udc51 Allow campaign creators and their team to do more with fundraising data (incorporating current funds and donation button on their website or app)","title":"Control to the user"}]}